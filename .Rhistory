ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
color = status,
#group = variable,
linetype = status),
linetype = betas_sd_mean$beta_values$lines) +
ggplot2::geom_point(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
color = status))
plot_betas
View(plot_betas)
View(betas_sd_mean)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
color = status,
#group = variable,
linetype = status),
linetype = betas_sd_mean$beta_values$lines) +
ggplot2::geom_point(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
color = status))
plot_betas
dev.off()
plot_betas
View(betas_sd_mean)
betas_sd_mean$beta_values$status <- as.factor(betas_sd_mean$beta_values$status)
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
color = status,
#group = variable,
linetype = status),
linetype = betas_sd_mean$beta_values$lines) +
ggplot2::geom_point(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
color = status))
plot_betas
View(betas_sd_mean$beta_values)
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
#color = status,
#group = variable,
linetype = status),
linetype = betas_sd_mean$beta_values$lines) +
ggplot2::geom_point(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
color = status))
plot_betas
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
#color = status,
#group = variable,
)#linetype = status),
linetype = betas_sd_mean$beta_values$lines) +
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
#color = status,
#group = variable,
),#linetype = status),
linetype = betas_sd_mean$beta_values$lines) +
ggplot2::geom_point(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
color = status))
plot_betas
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
#color = status,
group = variable,
),#linetype = status),
linetype = betas_sd_mean$beta_values$lines) +
ggplot2::geom_point(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
color = status))
plot_betas
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
#color = status,
group = variable,
),#linetype = status),
linetype = betas_sd_mean$beta_values$lines)# +
plot_betas
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
#color = status,
group = variable,
),#linetype = status),
)#linetype = betas_sd_mean$beta_values$lines)# +
plot_betas
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
color = status,
group = variable,
),#linetype = status),
)#linetype = betas_sd_mean$beta_values$lines)# +
plot_betas
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
color = status,
group = variable,
linetype = status
),#),
)#linetype = betas_sd_mean$beta_values$lines)# +
plot_betas
betas_sd_mean$beta_values %>% dplyr::filter()
betas_sd_mean$beta_values %>% dplyr::filter(status %in% c("control", "GSM2562699"))
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values %>% dplyr::filter(status %in% c("control", "GSM2562699")),
ggplot2::aes(x = start,
y = value,
color = status,
group = variable,
linetype = status
),#),
)#linetype = betas_sd_mean$beta_values$lines)# +
plot_betas
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values %>% dplyr::filter(status %in% c("control", "GSM2562699")),
ggplot2::aes(x = start,
y = value,
color = status,
group = variable,
linetype = status
),#),
)+#linetype = betas_sd_mean$beta_values$lines)# +
ggplot2::geom_point(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
color = status))
plot_betas
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values %>% dplyr::filter(status %in% c("control", "GSM2562699")),
ggplot2::aes(x = start,
y = value,
color = status,
group = variable,
linetype = status
),#),
)#linetype = betas_sd_mean$beta_values$lines)# +
plot_betas
View(betas_sd_mean$beta_values %>% dplyr::filter(status %in% c("control", "GSM2562699"))
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
betas_sd_mean
status <- ifelse(betas_sd_mean$beta_values$variable %in% dmr$sample,
dmr$sample,
"control")
status
dmr$sample
betas_sd_mean$beta_values$variable
View(betas_sd_mean$beta_values$variable)
tail(stauts)
tail(status)
status <- ifelse(betas_sd_mean$beta_values$variable %in% dmr$sample,
dmr$sample,
"control")
betas_sd_mean$beta_values$variable
ifelse(betas_sd_mean$beta_values$variable %in% dmr$sample,
dmr$sample,
"control")
ifelse(betas_sd_mean$beta_values$variable %notin% dmr$sample,
"control")
`%notin%` <- Negate(%in%)
%notin% <- Negate(%in%)
%notin% <- Negate(`%in%`)
`%notin%` <- Negate(`%in%`)
ifelse(betas_sd_mean$beta_values$variable %notin% dmr$sample,
"control")
if(betas_sd_mean$beta_values$variable %notin% dmr$sample,
betas_sd_mean$beta_values$variable %notin% dmr$sample
betas_sd_mean$beta_values$variable %>% dplyr::mutate(if(.x %notin% dmr$sample){"control"})
betas_sd_mean$beta_values$variable %>% as.character() %>% dplyr::mutate(if(.x %notin% dmr$sample){"control"})
?dplyr::mutate
?dplyr::transmute
betas_sd_mean$beta_values %>% dplyr::select(variable) %>% dplyr::mutate(if(.x %notin% dmr$sample){"control"})
betas_sd_mean$beta_values %>% dplyr::select(variable) %>% dplyr::mutate(if(. %notin% dmr$sample){"control"})
View(betas_sd_mean$beta_values %>% dplyr::select(variable) %>% dplyr::mutate(if(. %notin% dmr$sample){"control"}))
dmr$sample
betas_sd_mean$beta_values %>% dplyr::select(variable) %>% dplyr::mutate(if(~ %notin% dmr$sample){"control"})
betas_sd_mean$beta_values %>% dplyr::select(variable) %>% dplyr::mutate(if(.~ %notin% dmr$sample){"control"})
betas_sd_mean$beta_values %>% dplyr::select(variable) %>% dplyr::mutate(if(%notin% dmr$sample){"control"})
betas_sd_mean$beta_values %>% dplyr::select(variable) %>% dplyr::mutate(if(. %notin% dmr$sample){"control"})
betas_sd_mean$beta_values %>% dplyr::select(variable)
betas_sd_mean$beta_values %>% dplyr::select(variable) %>% dplyr::mutate(if(variable %notin% dmr$sample){"control"})
variable %notin% dmr$sample
betas_sd_mean$beta_values$variable %notin% dmr$sample
betas_sd_mean$beta_values$variable[betas_sd_mean$beta_values$variable %notin% dmr$sample,]
betas_sd_mean$beta_values$variable[betas_sd_mean$beta_values$variable %notin% dmr$sample]
betas_sd_mean$beta_values$variable[betas_sd_mean$beta_values$variable %notin% dmr$sample] <- "control"
betas_sd_mean$beta_values$variable[betas_sd_mean$beta_values$variable %notin% dmr$sample]
betas_sd_mean$beta_values$variable
betas_sd_mean <- betas_sd_mean(gr) #epi_plot
betas_sd_mean$beta_values$variable[betas_sd_mean$beta_values$variable %notin% dmr$sample]
betas_sd_mean$beta_values$variable %notin% dmr$sample
betas_sd_mean$beta_values[betas_sd_mean$beta_values$variable %notin% dmr$sample, "variable"] <- "control"
betas_sd_mean$beta_values
betas_sd_mean <- betas_sd_mean(gr) #epi_plot
`%notin%` <- Negate(`%in%`)
betas_sd_mean$beta_values$variable <- as.character(betas_sd_mean$beta_values$variable)
betas_sd_mean$beta_values[betas_sd_mean$beta_values$variable %notin% dmr$sample, "variable"] <- "control"
betas_sd_mean$beta_values
betas_sd_mean <- betas_sd_mean(gr) #epi_plot
betas_sd_mean$beta_values$variable %notin% dmr$sample
betas_sd_mean$beta_values[betas_sd_mean$beta_values$variable %notin% dmr$sample, "variable"]
betas_sd_mean <- betas_sd_mean(gr) #epi_plot
`%notin%` <- Negate(`%in%`)
betas_sd_mean$beta_values$variable <- as.character(betas_sd_mean$beta_values$variable)
betas_sd_mean$beta_values$status <- betas_sd_mean$beta_values$variable
betas_sd_mean$beta_values[betas_sd_mean$beta_values$status %notin% dmr$sample, "status"] <- "control"
betas_sd_mean$beta_values
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
View)betas_sd_mean$beta_values
View(betas_sd_mean$beta_values)
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
group = variable,
color = status),
linetype = betas_sd_mean$beta_values$lines) +
ggplot2::geom_point(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
group = variable,
color = status))
plot_betas
dev.off()
plot_betas
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
View(betas_sd_mean$beta_values)
dmr$sample
betas_sd_mean$beta_values %>% dplyr::select(status) %>% dplyr::mutate(if(. == "control"){"black"})
betas_sd_mean$beta_values %>% dplyr::select(status)
betas_sd_mean$beta_values %>% dplyr::select(status) %>% dplyr::group_by(status) %>% dplyr::mutate()
betas_sd_mean$beta_values %>% dplyr::select(status) %>% dplyr::group_by(status) %>% dplyr::mutate(if("control"){"a"})
betas_sd_mean$beta_values %>% dplyr::select(status) %>% dplyr::group_by(status) %>% dplyr::mutate(if(x == "control"){"a"})
betas_sd_mean$beta_values %>% dplyr::select(status) %>% dplyr::group_by(status) %>% dplyr::mutate(if(. == "control"){"a"})
betas_sd_mean$beta_values %>% dplyr::select(status) %>% dplyr::mutate(if(. == "control"){"a"})
betas_sd_mean$beta_values %>% dplyr::select(status) %>% plyr::mapvalues(c("control", "mean"), c("a", "b"))
betas_sd_mean$beta_values %>% dplyr::select(status)
unique(betas_sd_mean$beta_values %>% dplyr::select(status))
betas_sd_mean$beta_values %>% dplyr::select(status) %>% plyr::mapvalues(c("control", "GSM2562699"), c("a", "b"))
?plyr::mapvalues
plyr::mapvalues(betas_sd_mean$beta_values$status, c("control", "GSM2562699"), c("a", "b"))
plyr::mapvalues(betas_sd_mean$beta_values$status, c("control"), c("grey"))
betas_sd_mean$beta_values$color <- plyr::mapvalues(betas_sd_mean$beta_values$status, c("control"), c("grey"))
?palette()
palette.colors(1)
palette.colors(2)
palette.colors(4)
palette.pals()
palette.colors(4, palette = "ggplot2")
palette.colors(4, palette = "ggplot2")[-1]
dmr$sample
palette.colors(length(dmr_sample)+1, palette = "ggplot2")[-1]
palette.colors(length(dmr$sample)+1, palette = "ggplot2")[-1]
betas_sd_mean$beta_values$color <- plyr::mapvalues(betas_sd_mean$beta_values$color,
dmr$sample,
palette.colors(length(dmr$sample)+1, palette = "ggplot2")[-1])
betas_sd_mean$beta_values$color
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
group = variable,
#color = status
),
color = betas_sd_mean$beta_values$color,
linetype = betas_sd_mean$beta_values$lines) +
ggplot2::geom_point(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
group = variable,
color = status))
plot_betas
dev.off()
plot_betas
betas_sd_mean$beta_values$color
betas_sd_mean$beta_values$lines
View(betas_sd_mean$beta_values)
colors <- plyr::mapvalues(betas_sd_mean$beta_values$status, c("control"), c("black"))
colors <- plyr::mapvalues(colors,
dmr$sample,
palette.colors(length(dmr$sample)+1, palette = "ggplot2")[-1])
colors
plot_betas <- ggplot2::ggplot() +
ggplot2::geom_line(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
group = variable,
color = status
),
#color = betas_sd_mean$beta_values$color,
linetype = betas_sd_mean$beta_values$lines) +
ggplot2::geom_point(data = betas_sd_mean$beta_values,
ggplot2::aes(x = start,
y = value,
group = variable,
color = status))
plot_betas
plot_sd <- plot_betas +
ggplot2::geom_ribbon(data = betas_sd_mean$sd,
ggplot2::aes(x = start,
ymin = sd_2_lower,
ymax = sd_2_upper),
fill = "gray39", alpha = 0.4) +
ggplot2::geom_ribbon(data = betas_sd_mean$sd,
ggplot2::aes(x = start,
ymin = sd_1.5_lower,
ymax = sd_1.5_upper),
fill = "gray40", alpha = 0.4) +
ggplot2::geom_ribbon(data = betas_sd_mean$sd,
ggplot2::aes(x = start,
ymin = sd_1_lower,
ymax = sd_1_upper),
fill = "gray98", alpha = 0.4)
plot_mean <-  plot_sd +
ggplot2::geom_line(data = betas_sd_mean$mean,
ggplot2::aes(x = start,
y = mean,
color = "mean")) +
ggplot2::geom_point(data = betas_sd_mean$mean,
ggplot2::aes(x = start, y = mean),
show.legend = TRUE)
plot_cpg_names <- plot_mean +
ggrepel::geom_text_repel() +
ggplot2::annotate(geom = "text",
x = names$start,
y = names$value + 0.05,
label = names$id,
color = "black")
Q
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
colors
plot_cpg_names
dev.off()
plot_cpg_names
plot <- plot_cpg_names +
ggplot2::lims(y = c(0,1)) +
ggplot2::scale_colour_manual(name = "Status", values = colors) +
ggplot2::theme_bw() +
ggplot2::ggtitle(paste0(dmr$sample, collapse = ", ")) +
# ggplot2::ggtitle(paste0(dmr$sample,": ",
#                         dmr$seqnames, ":",
#                         dmr$start,
#                         " - ", dmr$end)) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) +
ggplot2::labs(x = "Coordinates") +
ggplot2::labs(y = "DNA methylation level")
plot
colors <- c("control" = "black",
"mean" = "darkblue", "red")
names(colors)[3] <- dmr$sample
colors
plot <- plot_cpg_names +
ggplot2::lims(y = c(0,1)) +
ggplot2::scale_colour_manual(name = "Status", values = colors) +
ggplot2::theme_bw() +
ggplot2::ggtitle(paste0(dmr$sample, collapse = ", ")) +
# ggplot2::ggtitle(paste0(dmr$sample,": ",
#                         dmr$seqnames, ":",
#                         dmr$start,
#                         " - ", dmr$end)) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) +
ggplot2::labs(x = "Coordinates") +
ggplot2::labs(y = "DNA methylation level")
plot
palette.colors(length(dmr$sample)+1, palette = "ggplot2")[-1]
names(colors)[-1:2]
names(colors)[-1] <- dmr$sample
colors <- c("control" = "black",
"mean" = "darkblue",  palette.colors(length(dmr$sample)+1, palette = "ggplot2")[-1])
names(colors)[-1]
colors
names(colors)[-2]
names(colors)[-c(1,2)]
names(colors)[-c(1,2)] <- dmr$sample
colors
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
plot <- plot_cpg_names +
ggplot2::lims(y = c(0,1)) +
ggplot2::scale_colour_manual(name = "Status", values = colors) +
ggplot2::theme_bw() +
ggplot2::ggtitle(paste0(dmr$sample, collapse = ", ")) +
# ggplot2::ggtitle(paste0(dmr$sample,": ",
#                         dmr$seqnames, ":",
#                         dmr$start,
#                         " - ", dmr$end)) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) +
ggplot2::labs(x = "Coordinates") +
ggplot2::labs(y = "DNA methylation level")
plot
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
shiny::runExample()
