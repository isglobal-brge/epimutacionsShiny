# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
results$results$epi_id
results$results$epi_id == input$selected_epimutation
sum(results$results$epi_id == input$selected_epimutation) > 1
which(results$results$epi_id == input$selected_epimutation)
which(results$results$epi_id == input$selected_epimutation)
plots<- lapply(which(results$results$epi_id == input$selected_epimutation), funtction(x){
x=1
plot_epimutations(as.data.frame(results$results[x]),
loaded_dataset$data,
genes_annot = input$annotation_genes,
regulation = input$regulation)
input$annotation_genes
input$regulation
loaded_dataset$data
as.data.frame(results$results[x])
as.data.frame(results$results[results$results$epi_id == input$selected_epimutation,])
plots <- lapply(which(results$results$epi_id == input$selected_epimutation), funtction(x){
as.data.frame(results$results[x,])
plots <- lapply(which(results$results$epi_id == input$selected_epimutation), funtction(x){
plots <- lapply(which(results$results$epi_id == input$selected_epimutation), function(x){
plot_epimutations(as.data.frame(results$results[x,]),
loaded_dataset$data,
genes_annot = input$annotation_genes,
regulation = input$regulation)
})
plots[[1]]
plots[[2]]
plots[2]
plot <- plot_epimutations(as.data.frame(results$results[results$results$epi_id == input$selected_epimutation,]),
loaded_dataset$data,
genes_annot = input$annotation_genes,
regulation = input$regulation)
plot
usethis::use_package( "cowplot" )
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
plot
cowplot::plot_grid(plots)
cowplot::plot_grid(plots[[1]])
plots[[1]]
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
plot
plot(plot)
print(plot)
dev.off()
dev.off()
plot
plot
plots[[1]]
dev.off()
plots[[1]]
plots[[2]]
plot <- cowplot::plot_grid(plots[[1]], plots[[2]])
plot
cowplot::plot_grid(unlist(plots))
?cowplot::plot_grid(unlist(plots))
?cowplot::plot_grid(plots)
cowplot::plot_grid(plots)
plots[1]
plots[2]
print0("plots[", length(plots), "]")
paste0("plots[", length(plots), "]")
paste0("plots[", 1:length(plots), "]")
paste(paste0("plots[", 1:length(plots), "]"), collapse = ", ")
paste("cowplot::plot_grid(", paste0("plots[", 1:length(plots), "]"), ")", collapse = ", ")
paste0("cowplot::plot_grid(", paste0(paste0("plots[", 1:length(plots), "]"), collapse = ", "), ")")
expr <- paste0("cowplot::plot_grid(", paste0(paste0("plots[", 1:length(plots), "]"), collapse = ", "), ")")
expr <- paste0("cowplot::plot_grid(", paste0(paste0("plots[", 1:length(plots), "]"), collapse = ", "), ")")
expr
eval(str2expression(expr))
expr <- paste0("cowplot::plot_grid(", paste0(paste0("plots[[", 1:length(plots), "]]"), collapse = ", "), ")")
eval(str2expression(expr))
expr <- paste0("plot <- cowplot::plot_grid(", paste0(paste0("plots[[", 1:length(plots), "]]"), collapse = ", "), ")")
eval(str2expression(expr))
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
input$selected_epimutation
input$selected_epimutation != ""
input$selected_epimutation != "a"
is.null(input$selected_epimutation)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
validate(
need(!is.null(input$selected_epimutation), "Please select an epimutation")
)
validate(
need(!is.null(input$selected_epimutation), "Please select an epimutation")
)
!is.null(input$selected_epimutation)
validate(
need(!is.null(input$selected_epimutation), "Please select an epimutation")
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
need(!is.null(input$selected_epimutation), "Please select an epimutation")
validate(
need(!is.null(input$selected_epimutation), "Please select an epimutation")
)
validate(
need(!is.null(input$selected_epimutation), "Please select an epimutation")
)
input$selected_epimutation
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
